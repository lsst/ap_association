# This file is part of ap_association.
#
# Developed for the LSST Data Management System.
# This product includes software developed by the LSST Project
# (https://www.lsst.org).
# See the COPYRIGHT file at the top-level directory of this distribution
# for details of code ownership.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import datetime
import unittest

import numpy as np
import pandas as pd
import astropy.time

from lsst.ap.association import dailySolarSystemPrecompute
import lsst.utils.tests

class TestDailySolarSystemPrecompute(unittest.TestCase):
    def setUp(self):
        self.task = dailySolarSystemPrecompute.DailySolarSystemPrecomputeTask()
        self.orbits = pd.DataFrame({'ObjID': {0: '2003 UB313', 1: '1979 HP'},
                                    'a': {0: 68.1551616, 1: 3.1174},
                                    'e': {0: 0.4323163, 1: 0.1290995},
                                    'inc': {0: 43.74509, 1: 2.36468},
                                    'node': {0: 36.07711, 1: 120.31001},
                                    'argPeri': {0: 150.86717, 1: 53.58816},
                                    'ma': {0: 209.40575, 1: 47.42226},
                                    'epochMJD_TDB': {0: 2460200.5, 1: 2460200.5},
                                    'FORMAT': {0: 'KEP', 1: 'KEP'}})
        self.date = astropy.time.Time(60292.5, format='mjd', scale='tai')


    @unittest.skip('Not finished yet')
    def test_run(self):
        self.task.run(date)
        self.assertEqual(result.orbits, [])

    def test_compute_positions(self):
        expected = pd.DataFrame()
        result = self.task._compute_positions(self.orbits, self.date)
        np.testing.assert_allclose(expected, result)
        


class MemoryTester(lsst.utils.tests.MemoryTestCase):
    pass


def setup_module(module):
    lsst.utils.tests.init()


if __name__ == "__main__":
    lsst.utils.tests.init()
    unittest.main()
